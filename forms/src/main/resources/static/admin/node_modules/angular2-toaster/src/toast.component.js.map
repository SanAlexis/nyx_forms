{"version":3,"file":"toast.component.js","sourceRoot":"","sources":["../../src/toast.component.ts"],"names":[],"mappings":";;;;;;;;;AAAA,OAAO,EAAC,SAAS,EAAE,KAAK,EAAE,MAAM,EAAE,SAAS,EAAE,gBAAgB,EAAE,YAAY,EACvE,wBAAwB,EAAE,iBAAiB,EAC9C,MAAM,eAAe,CAAC;AACvB,OAAO,EAAC,YAAY,EAAW,MAAM,2BAA2B,CAAC;AAEjE,OAAO,EAAC,cAAc,EAAC,MAAM,kBAAkB,CAAC;AAmBhD;IAgBI,wBACU,SAAuB,EACvB,wBAAkD,EAClD,iBAAoC;QAFpC,cAAS,GAAT,SAAS,CAAc;QACvB,6BAAwB,GAAxB,wBAAwB,CAA0B;QAClD,sBAAiB,GAAjB,iBAAiB,CAAmB;QARvC,mBAAc,GAAG,cAAc,CAAC;QAGhC,eAAU,GAAG,IAAI,YAAY,EAAE,CAAC;IAMpC,CAAC;IAEJ,iCAAQ,GAAR;QACI,IAAI,IAAI,CAAC,KAAK,CAAC,SAAS,EAAE;YACtB,IAAI,CAAC,aAAa,GAAG,IAAI,CAAC,SAAS,CAAC,uBAAuB,CAAC,IAAI,CAAC,KAAK,CAAC,SAAS,CAAC,CAAC;SACrF;QACD,IAAI,IAAI,CAAC,KAAK,CAAC,cAAc,KAAK,cAAc,CAAC,WAAW,EAAE;YAC1D,IAAI,CAAC,YAAY,GAAG,IAAI,CAAC,SAAS,CAAC,uBAAuB,CAAC,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,CAAC;SAC/E;IACL,CAAC;IAED,wCAAe,GAAf;QACI,IAAI,IAAI,CAAC,KAAK,CAAC,cAAc,KAAK,IAAI,CAAC,cAAc,CAAC,SAAS,EAAE;YAC7D,IAAM,SAAS,GAAG,IAAI,CAAC,wBAAwB,CAAC,uBAAuB,CAAC,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,CAAC;YACzF,IAAM,iBAAiB,GAAQ,IAAI,CAAC,aAAa,CAAC,eAAe,CAAC,SAAS,EAAE,SAAS,EAAE,IAAI,CAAC,aAAa,CAAC,QAAQ,CAAC,CAAC;YACrH,iBAAiB,CAAC,QAAQ,CAAC,KAAK,GAAG,IAAI,CAAC,KAAK,CAAC;YAC9C,IAAI,CAAC,iBAAiB,CAAC,aAAa,EAAE,CAAC;SAC1C;IACL,CAAC;IAED,8BAAK,GAAL,UAAM,KAAiB,EAAE,KAAY;QACjC,KAAK,CAAC,eAAe,EAAE,CAAC;QACxB,IAAI,CAAC,UAAU,CAAC,IAAI,CAAC;YACjB,KAAK,EAAG,EAAE,KAAK,EAAE,KAAK,EAAE,aAAa,EAAE,IAAI,EAAC;SAC/C,CAAC,CAAC;IACP,CAAC;IA3CQ;QAAR,KAAK,EAAE;;iDAAc;IACb;QAAR,KAAK,EAAE;;qDAAmB;IAClB;QAAR,KAAK,EAAE;;sDAAoB;IACnB;QAAR,KAAK,EAAE;;wDAAsB;IAC0B;QAAvD,SAAS,CAAC,eAAe,EAAE,EAAE,IAAI,EAAE,gBAAgB,EAAE,CAAC;kCAAgB,gBAAgB;yDAAC;IAQxF;QADC,MAAM,EAAE;;sDAC8B;IAd9B,cAAc;QAjB1B,SAAS,CAAC;YACP,QAAQ,EAAE,aAAa;YACvB,QAAQ,EAAE,0tBAYC;SACd,CAAC;yCAmBuB,YAAY;YACG,wBAAwB;YAC/B,iBAAiB;OAnBrC,cAAc,CA8C1B;IAAD,qBAAC;CAAA,AA9CD,IA8CC;SA9CY,cAAc","sourcesContent":["import {Component, Input, Output, ViewChild, ViewContainerRef, EventEmitter,\n    ComponentFactoryResolver, ChangeDetectorRef, OnInit, AfterViewInit\n} from '@angular/core';\nimport {DomSanitizer, SafeHtml} from '@angular/platform-browser';\nimport {Toast} from './toast';\nimport {BodyOutputType} from './bodyOutputType';\n\n@Component({\n    selector: '[toastComp]',\n    template: `\n        <i class=\"toaster-icon\" [ngClass]=\"iconClass\"></i>\n        <div class=\"toast-content\">\n            <div [ngClass]=\"titleClass\">{{toast.title}}</div>\n            <div [ngClass]=\"messageClass\" [ngSwitch]=\"toast.bodyOutputType\">\n                <div *ngSwitchCase=\"bodyOutputType.Component\" #componentBody></div>\n                <div *ngSwitchCase=\"bodyOutputType.TrustedHtml\" [innerHTML]=\"safeBodyHtml\"></div>\n                <div *ngSwitchCase=\"bodyOutputType.Default\">{{toast.body}}</div>\n            </div>\n        </div>\n        <div class=\"toast-close-button\" *ngIf=\"toast.showCloseButton\" (click)=\"click($event, toast)\"\n            [innerHTML]=\"safeCloseHtml\">\n        </div>`\n})\n\nexport class ToastComponent implements OnInit, AfterViewInit {\n\n    @Input() toast: Toast;\n    @Input() iconClass: string;\n    @Input() titleClass: string;\n    @Input() messageClass: string;\n    @ViewChild('componentBody', { read: ViewContainerRef }) componentBody: ViewContainerRef;\n\n    safeCloseHtml: SafeHtml;\n    safeBodyHtml: SafeHtml;\n\n    public bodyOutputType = BodyOutputType;\n\n    @Output()\n    public clickEvent = new EventEmitter();\n\n    constructor(\n      private sanitizer: DomSanitizer,\n      private componentFactoryResolver: ComponentFactoryResolver,\n      private changeDetectorRef: ChangeDetectorRef\n    ) {}\n\n    ngOnInit() {\n        if (this.toast.closeHtml) {\n            this.safeCloseHtml = this.sanitizer.bypassSecurityTrustHtml(this.toast.closeHtml);\n        }\n        if (this.toast.bodyOutputType === BodyOutputType.TrustedHtml) {\n            this.safeBodyHtml = this.sanitizer.bypassSecurityTrustHtml(this.toast.body);\n        }\n    }\n\n    ngAfterViewInit() {\n        if (this.toast.bodyOutputType === this.bodyOutputType.Component) {\n            const component = this.componentFactoryResolver.resolveComponentFactory(this.toast.body);\n            const componentInstance: any = this.componentBody.createComponent(component, undefined, this.componentBody.injector);\n            componentInstance.instance.toast = this.toast;\n            this.changeDetectorRef.detectChanges();\n        }\n    }\n\n    click(event: MouseEvent, toast: Toast) {\n        event.stopPropagation();\n        this.clickEvent.emit({\n            value : { toast: toast, isCloseButton: true}\n        });\n    }\n}\n"]}