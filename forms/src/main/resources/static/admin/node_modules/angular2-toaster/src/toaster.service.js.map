{"version":3,"file":"toaster.service.js","sourceRoot":"","sources":["../../src/toaster.service.ts"],"names":[],"mappings":";;;;;;;;;AAAA,OAAO,EAAC,UAAU,EAAC,MAAM,eAAe,CAAC;AAGzC,OAAO,EAAC,UAAU,EAAE,OAAO,EAAW,MAAM,MAAM,CAAC;AACnD,OAAO,EAAC,KAAK,EAAC,MAAM,gBAAgB,CAAA;AAEpC,sEAAsE;AACtE;IAAA;IAOA,CAAC;IANU,YAAO,GAAd;QACI,OAAO,sCAAsC,CAAC,OAAO,CAAC,OAAO,EAAE,UAAS,CAAC;YACrE,IAAM,CAAC,GAAG,IAAI,CAAC,MAAM,EAAE,GAAG,EAAE,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,KAAK,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAE,CAAC,GAAG,GAAG,GAAG,GAAG,CAAE,CAAC;YACxE,OAAO,CAAC,CAAC,QAAQ,CAAC,EAAE,CAAC,CAAC;QAC1B,CAAC,CAAC,CAAC;IACP,CAAC;IACL,WAAC;AAAD,CAAC,AAPD,IAOC;AAGD;IAWI;;OAEG;IACH;QAAA,iBAKC;QAJG,IAAI,CAAC,QAAQ,GAAG,IAAI,UAAU,CAAQ,UAAC,QAAa,IAAK,OAAA,KAAI,CAAC,SAAS,GAAG,QAAQ,EAAzB,CAAyB,CAAC,CAAC,IAAI,CAAC,KAAK,EAAE,CAAC,CAAC;QAClG,IAAI,CAAC,WAAW,GAAG,IAAI,UAAU,CAAgB,UAAC,QAAa,IAAK,OAAA,KAAI,CAAC,YAAY,GAAG,QAAQ,EAA5B,CAA4B,CAAC,CAAC,IAAI,CAAC,KAAK,EAAE,CAAC,CAAC;QAChH,IAAI,CAAC,mBAAmB,GAAG,IAAI,OAAO,EAAiB,CAAA;QACvD,IAAI,CAAC,WAAW,GAAG,IAAI,CAAC,mBAAmB,CAAC,IAAI,CAAC,KAAK,EAAE,CAAC,CAAC;IAC9D,CAAC;IAED;;;;;;;;OAQG;IACH,4BAAG,GAAH,UAAI,IAAoB,EAAE,KAAc,EAAE,IAAa;QACnD,IAAM,KAAK,GAAG,OAAO,IAAI,KAAK,QAAQ,CAAC,CAAC,CAAC,EAAE,IAAI,EAAE,IAAI,EAAE,KAAK,EAAE,KAAK,EAAE,IAAI,EAAE,IAAI,EAAE,CAAC,CAAC,CAAC,IAAI,CAAC;QAEzF,IAAI,CAAC,KAAK,CAAC,OAAO,EAAE;YAChB,KAAK,CAAC,OAAO,GAAG,IAAI,CAAC,OAAO,EAAE,CAAC;SAClC;QAED,IAAI,CAAC,IAAI,CAAC,SAAS,EAAE;YACjB,MAAM,IAAI,KAAK,CAAC,gEAAgE,CAAC,CAAC;SACrF;QAED,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;QAC3B,OAAO,KAAK,CAAC;IACjB,CAAC;IAED;;;;;;;;;OASG;IACH,iCAAQ,GAAR,UAAS,IAAoB,EAAE,KAAc,EAAE,IAAa;QAA5D,iBAMC;QALG,UAAU,CAAC;YACP,KAAI,CAAC,GAAG,CAAC,IAAI,EAAE,KAAK,EAAE,IAAI,CAAC,CAAC;QAChC,CAAC,EAAE,CAAC,CAAC,CAAC;QAEN,OAAO,IAAI,CAAC,QAAQ,CAAC;IACzB,CAAC;IAED;;;;;;OAMG;IACH,8BAAK,GAAL,UAAM,OAAgB,EAAE,gBAAyB;QAC7C,IAAM,YAAY,GAAkB;YAChC,OAAO,EAAE,OAAO,EAAE,gBAAgB,EAAE,gBAAgB;SACvD,CAAC;QAEF,IAAI,CAAC,YAAY,CAAC,IAAI,CAAC,YAAY,CAAC,CAAA;IACxC,CAAC;IA5EQ,cAAc;QAD1B,UAAU,EAAE;;OACA,cAAc,CA6E1B;IAAD,qBAAC;CAAA,AA7ED,IA6EC;SA7EY,cAAc","sourcesContent":["import {Injectable} from '@angular/core';\nimport {Toast} from './toast';\nimport {IClearWrapper} from './clearWrapper';\nimport {Observable, Subject, Observer} from 'rxjs';\nimport {share} from 'rxjs/operators'\n\n// http://stackoverflow.com/questions/26501688/a-typescript-guid-class\nclass Guid {\n    static newGuid() {\n        return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function(c) {\n            const r = Math.random() * 16 | 0, v = c === 'x' ? r : ( r & 0x3 | 0x8 );\n            return v.toString(16);\n        });\n    }\n}\n\n@Injectable()\nexport class ToasterService {\n    addToast: Observable<Toast>;\n    private _addToast: Observer<Toast>;\n\n    clearToasts: Observable<IClearWrapper>;\n    private _clearToasts: Observer<IClearWrapper>;\n\n    removeToast: Observable<IClearWrapper>;\n    /** @internal */\n    _removeToastSubject: Subject<IClearWrapper>;\n\n    /**\n     * Creates an instance of ToasterService.\n     */\n    constructor() {\n        this.addToast = new Observable<Toast>((observer: any) => this._addToast = observer).pipe(share());\n        this.clearToasts = new Observable<IClearWrapper>((observer: any) => this._clearToasts = observer).pipe(share());\n        this._removeToastSubject = new Subject<IClearWrapper>()\n        this.removeToast = this._removeToastSubject.pipe(share());\n    }\n\n    /**\n     * Synchronously create and show a new toast instance.\n     *\n     * @param {(string | Toast)} type The type of the toast, or a Toast object.\n     * @param {string=} title The toast title.\n     * @param {string=} body The toast body.\n     * @returns {Toast}\n     *          The newly created Toast instance with a randomly generated GUID Id.\n     */\n    pop(type: string | Toast, title?: string, body?: string): Toast {\n        const toast = typeof type === 'string' ? { type: type, title: title, body: body } : type;\n\n        if (!toast.toastId) {\n            toast.toastId = Guid.newGuid();\n        }\n\n        if (!this._addToast) {\n            throw new Error('No Toaster Containers have been initialized to receive toasts.');\n        }\n\n        this._addToast.next(toast);\n        return toast;\n    }\n\n    /**\n     * Asynchronously create and show a new toast instance.\n     *\n     * @param {(string | Toast)} type The type of the toast, or a Toast object.\n     * @param {string=} title The toast title.\n     * @param {string=} body The toast body.\n     * @returns {Observable<Toast>}\n     *          A hot Observable that can be subscribed to in order to receive the Toast instance\n     *          with a randomly generated GUID Id.\n     */\n    popAsync(type: string | Toast, title?: string, body?: string): Observable<Toast> {\n        setTimeout(() => {\n            this.pop(type, title, body);\n        }, 0);\n\n        return this.addToast;\n    }\n\n    /**\n     * Clears a toast by toastId and/or toastContainerId.\n     *\n     * @param {string} toastId The toastId to clear.\n     * @param {number=} toastContainerId\n     *        The toastContainerId of the container to remove toasts from.\n     */\n    clear(toastId?: string, toastContainerId?: number) {\n        const clearWrapper: IClearWrapper = {\n            toastId: toastId, toastContainerId: toastContainerId\n        };\n\n        this._clearToasts.next(clearWrapper)\n    }\n}\n"]}